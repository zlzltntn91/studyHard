<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

<!--
		관점(Aspect)은 프로그램의 핵심 관심사에 걸쳐 적용되는 공통 프로그램 영역을 의미한다. 예를 들면 로깅, 인증, 권한확인, 트랜잭션은 비지니스 기능 구현시에 공통적으로 적용되는 요소이며 하나의 관점으로 정의될 수 있다.
		핵심 관심사(Core concern)는 프로그램을 작성하려는 핵심 가치와 목적이 드러난 관심 영역으로 보통 핵심 비지니스 기능에 해당한다.
		횡단 관심사(Cross-cutting concern)는 핵심 관심에 영향을 주는 프로그램의 영역으로, 로깅과 트랜잭션, 인증처리와 같은 시스템 공통 처리 영역이 해당된다.

		Aspect : 구현하고자 하는 횡단 관심사의 기능이다.
		Join point : Aspect를 삽입하여 실행 가능한 어플리케이션의 특정 지점을 말한다.
		Point cut : Join point의 집합을 의미한다. 어떤 Join point를 사용할 것인지를 결정하기 위해 패턴 매칭을 이용하여 룰을 정의한다.

		Before advice: joinpoint 전에 수행되는 advice
		After returning advice: joinpoint가 성공적으로 리턴된 후에 동작하는 advice
		After throwing advice: 예외가 발생하여 joinpoint가 빠져나갈때 수행되는 advice
		After (finally) advice: join point를 빠져나가는(정상적이거나 예외적인 반환) 방법에 상관없이 수행되는 advice
		Around advice: joinpoint 전, 후에 수행되는 advice
-->

	<bean id="aopBean" class="kr.co.api.docuchain.aop.ApiResponseAOP"/>
	<aop:config>
<!--
		Point cut 정의
		Join point를 지정하여 Advice가 언제 실행될지를 지정
		Spring AOP는 Spring Bean에 대한 메서드 실행 Join point만을 지원하므로
		Spring에서 Point cut은 Bean의 메서드 실행점을 지정하는 것으로 생각할 수 있다.
-->
<!--	TODO AspectJ 포인트컷 표현식 알아보기  https://icarus8050.tistory.com/8 -->
		<aop:pointcut id="targetMethod" expression="execution(* kr.co.api.docuchain..*(..))"/>
<!--
		관점 정의
		<aop:aspect> 를 사용 하여 정의한다.
		Spring Bean처럼 설정되고 의존성 주입이 될 수 있다.
-->
		<aop:aspect ref="aopBean">
<!--
			Advice는 Aspect의 실제 구현체로 Point cut 표현식과 일치하는 Join point에 삽입되어 동작할 수 있는 코드다.
			Join point와 결합하여 동작하는 시점에 따라 before advice, after advice, around advice 타입으로 구분된다.
			@AspectJ를 이용한 AOP와 동일하게 5종류의 Advice를 지원한다.
-->
<!--		Before advice인 beforeTest() 메소드는 targetMethod()로 정의된 포인트컷 전에 수행된다.-->
			<aop:before method="beforeTest" pointcut-ref="targetMethod"/>
<!--
            Around Advice는 메소드 수행 전후에 수행된다.
            Around Advice는 정상 종료와 예외 발생 경우를 모두 처리해야 하는 경우에 사용된다.
            리소스 해제와 같은 작업이 해당된다.
-->
			<aop:around method="aroundTest" pointcut-ref="targetMethod"/>

<!--
			After (finlay) Advice는 메소드 수행 후 무조건 수행된다.
			afterTeest() Advice는 targetMethod()로 정의된 Point cut의 정상 종료 및 예외 발생의 경우
			모두에 대해 수행된다.
			보통은 리소스 해제와 같은 작업을 수행한다.
-->
			<aop:after method="afterTest" pointcut-ref="targetMethod" />
<!--
			After returing Advice는 정상적으로 메소드가 실행될 때 수행된다.
			targetMethod()로 정의된 포인트컷 후에 실행 된다
			Point cut의 실행 결과는 retVal 변수에 저장되어 전달된다.
-->
			<aop:after-returning method="afterReturningTest" pointcut-ref="targetMethod" returning="retVal"/>
<!--
			메소드가 수행 중 예외사항을 반환하고 종료하는 경우 수행된다.
			targetMethod()로 정의된 Point cut에서 예외가 발생한 후에 수행된다.
			Point cut에서 발생된 예외는 e 변수에 저장되어 전달된다.
-->
			<aop:after-throwing method="afterThrowingTest" pointcut-ref="targetMethod" throwing="e"/>
		</aop:aspect>
	</aop:config>
</beans>